# .github/workflows/astro-deploy.yml
# Astro 사이트를 빌드하고 GitHub Pages에 배포하는 워크플로우 파일입니다.

name: Astro 사이트 Pages 배포

on:
  # 기본 브랜치(예: main)를 대상으로 하는 푸시에 실행됩니다.
  push:
    branches: ["main"]

  # Actions 탭에서 수동으로 이 워크플로우를 실행할 수 있습니다.
  workflow_dispatch:

# GITHUB_TOKEN에 GitHub Pages 배포에 필요한 권한을 설정합니다.
permissions:
  contents: read # 저장소 콘텐츠를 읽을 수 있는 권한입니다.
  pages: write # GitHub Pages에 배포할 수 있는 권한입니다.
  id-token: write # OpenID Connect ID 토큰을 쓸 수 있는 권한으로, 배포 액션에 필요합니다.

# 동시 배포를 제어합니다. 한 번에 하나의 배포만 실행되도록 하고,
# 진행 중인 배포와 가장 최근 대기 중인 실행 사이의 다른 실행들은 건너뜁니다.
# 단, 진행 중인 프로덕션 배포는 완료될 수 있도록 취소하지 않습니다.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # Astro 프로젝트가 위치한 경로입니다.
  BUILD_PATH: "./ssg-astro"

jobs:
  build:
    name: 빌드 작업
    # 최신 Ubuntu 환경에서 실행됩니다.
    runs-on: ubuntu-latest
    steps:
      - name: 저장소 코드 가져오기 (Checkout)
        # 현재 브랜치의 코드를 러너(실행 환경)로 내려받습니다.
        uses: actions/checkout@v4

      - name: 사용할 패키지 매니저 감지
        id: detect-package-manager
        # pnpm, yarn, npm 순서로 lock 파일을 확인하여 사용할 패키지 매니저를 결정합니다.
        # 결정된 매니저 정보(이름, 설치 명령어, 실행기, 락파일 이름)를 다음 스텝에서 사용할 수 있도록 출력합니다.
        # working-directory를 설정하여 BUILD_PATH 안에서 lock 파일을 찾도록 합니다.
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
            echo "lockfile=pnpm-lock.yaml" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx" >> $GITHUB_OUTPUT # npx를 사용하여 로컬 패키지 실행
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "사용할 패키지 매니저를 결정할 수 없습니다. pnpm-lock.yaml, yarn.lock, 또는 package-lock.json 파일이 필요합니다."
            exit 1
          fi
        # 각 스텝에서 working-directory를 지정하는 것이 더 명확합니다.
        working-directory: ${{ env.BUILD_PATH }}

      - name: pnpm 설치
        # pnpm/action-setup 액션은 Node.js 환경에 pnpm을 설정합니다.
        # actions/setup-node 보다 먼저 실행되어야 pnpm 캐싱 등이 올바르게 작동합니다.
        uses: pnpm/action-setup@v3
        with:
          # package.json에 명시된 버전 사용 (없으면 최신 안정 버전)
          # version: latest # 특정 버전 고정이 필요하면 명시
          run_install: false # 의존성 설치는 다음 스텝에서 직접 실행합니다.

      - name: Node.js 환경 설정
        # 지정된 버전의 Node.js를 설치하고 PATH에 추가합니다.
        uses: actions/setup-node@v4
        with:
          # 사용할 Node.js 버전 (LTS 버전을 사용하는 것이 좋습니다)
          node-version: "20"
          # 감지된 패키지 매니저에 맞춰 캐시를 설정합니다 (npm, yarn, pnpm).
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          # 캐시 대상을 BUILD_PATH 안의 lock 파일 경로로 정확히 지정합니다.
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: GitHub Pages 설정 가져오기
        id: pages
        # GitHub Pages 배포에 필요한 기본 URL과 기본 경로를 자동으로 설정합니다.
        # 이 값들은 Astro 빌드 시 --site, --base 옵션으로 사용됩니다.
        uses: actions/configure-pages@v5

      - name: 의존성 설치
        # 감지된 패키지 매니저와 명령어(install 또는 ci)를 사용하여 프로젝트 의존성을 설치합니다.
        # lock 파일 기반으로 설치하여 빌드 환경의 일관성을 유지합니다 (npm ci, pnpm install, yarn install).
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        # 프로젝트 경로에서 실행합니다.
        working-directory: ${{ env.BUILD_PATH }}

      - name: Astro 사이트 빌드
        # 감지된 패키지 매니저 실행기(pnpm, yarn, npx)를 사용하여 'astro build' 명령어를 실행합니다.
        # '--site' 와 '--base' 옵션에 GitHub Pages 설정에서 가져온 값을 동적으로 전달하여,
        # astro.config.mjs 파일 수정 없이 올바른 경로로 빌드되도록 합니다.
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        # 프로젝트 경로에서 실행합니다.
        working-directory: ${{ env.BUILD_PATH }}

      - name: 빌드 결과물 아티팩트로 업로드
        # Astro 빌드 결과물이 생성되는 폴더(기본값: dist)의 내용을
        # GitHub Pages 배포 잡(deploy job)에서 사용할 수 있도록 아티팩트로 업로드합니다.
        uses: actions/upload-pages-artifact@v3
        with:
          # Astro 빌드 결과물이 저장되는 폴더 경로를 정확히 지정합니다.
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    # GitHub Pages 배포 환경을 설정합니다.
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 배포 완료 후 생성된 사이트 URL을 출력합니다.
    # 'build' 작업이 성공적으로 완료된 후에만 이 작업이 실행됩니다.
    needs: build
    # 최신 Ubuntu 환경에서 실행됩니다.
    runs-on: ubuntu-latest
    name: 배포 작업
    steps:
      - name: GitHub Pages에 배포
        id: deployment
        # 'build' 작업에서 업로드한 아티팩트를 가져와 GitHub Pages에 배포합니다.
        uses: actions/deploy-pages@v4
