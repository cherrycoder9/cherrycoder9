# .github/workflows/trivy.yml
# 프로젝트 루트 폴더 기준 경로 및 파일명

# 워크플로우 이름 (GitHub Actions 탭에 표시됨)
name: trivy

# 워크플로우 실행 조건 (트리거)
on:
  # "main" 브랜치에 푸시 시
  push:
    branches: ["main"]
  # "main" 브랜치 대상 풀 리퀘스트 시
  pull_request:
    branches: ["main"]
  # 주기적 실행 (매주 화요일 11:15 UTC)
  schedule:
    - cron: "15 11 * * 2"

# 워크플로우 전체에 적용될 기본 권한 설정 (최소 권한 원칙)
# 기본적으로 읽기 권한만 부여하고, 필요한 쓰기 권한은 각 job에서 명시적으로 설정합니다.
permissions:
  contents: read # 코드 체크아웃 등 기본적인 읽기 작업에 필요

# 실제 작업을 정의하는 부분
jobs:
  # 'scan' 작업 정의: Trivy를 사용하여 코드베이스의 취약점을 스캔하고 결과를 업로드합니다.
  scan:
    # 작업 이름 (GitHub Actions UI에 표시됨)
    name: Trivy scan
    # 실행 환경 (최신 우분투 리눅스)
    runs-on: ubuntu-latest

    # 'scan' 작업에만 필요한 권한 명시
    # Code Scanning 결과를 GitHub Security 탭에 업로드해야 하므로,
    # 이 작업에는 'security-events'에 대한 쓰기 권한이 필요합니다.
    permissions:
      security-events: write

    # 작업 내 단계들 (순차적으로 실행됨)
    steps:
      # 1단계: 코드 체크아웃
      # 워크플로우가 접근할 수 있도록 저장소 코드를 실행 환경으로 가져옵니다.
      - name: Checkout code
        # actions/checkout 액션 사용 (v4 - 현재 안정 버전)
        uses: actions/checkout@v4

      # 2단계: Trivy 설정 및 스캔 실행
      # Trivy 액션을 사용하여 파일 시스템(코드베이스)을 스캔하고 결과를 SARIF 형식으로 저장합니다.
      - name: Run Trivy vulnerability scanner in FS mode
        # aquasecurity/trivy-action 액션 사용 (v0.21.0 - 특정 버전 고정 권장)
        # 최신 버전은 https://github.com/aquasecurity/trivy-action/releases 에서 확인하세요.
        uses: aquasecurity/trivy-action@0.21.0
        with:
          # 스캔 유형: 'fs' (파일 시스템 스캔)
          scan-type: "fs"
          # 스캔 대상 경로: '.' (현재 디렉토리, 즉 체크아웃된 코드 전체)
          # target: '.' # 'path' 대신 'target'을 사용하는 것이 최신 버전(v0.18.0 이상)에서 권장됩니다.
          # path: "." # 이전 버전과의 호환성을 위해 남겨둘 수 있으나, target 사용이 더 명확합니다.
          # 출력 형식: 'sarif' (GitHub Code Scanning이 이해할 수 있는 형식)
          format: "sarif"
          # 결과를 저장할 파일 이름
          output: "trivy-results.sarif"
          # 보고할 취약점 심각도 수준: 중간(Medium) 이상만 보고
          severity: "MEDIUM,HIGH,CRITICAL"
          # 수정되지 않은(unfixed) 취약점은 무시하지 않음 (기본값)
          # ignore-unfixed: false # 필요시 true로 설정 가능

      # 3단계: Trivy 스캔 결과를 GitHub Security 탭에 업로드
      # 이전 단계에서 생성된 SARIF 파일을 GitHub의 Code Scanning 결과로 업로드합니다.
      - name: Upload Trivy scan results to GitHub Security tab
        # github/codeql-action/upload-sarif 액션 사용 (v3 - 현재 안정 버전)
        # 이 job에 'security-events: write' 권한이 부여되었으므로 GITHUB_TOKEN을 사용하여 업로드 가능
        uses: github/codeql-action/upload-sarif@v3
        with:
          # 업로드할 SARIF 파일 지정
          sarif_file: "trivy-results.sarif"
          # 카테고리 지정 (선택 사항, Security 탭에서 필터링 등에 사용될 수 있음)
          # category: trivy-fs-scan
